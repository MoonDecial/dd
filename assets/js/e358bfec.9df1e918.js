"use strict";(self.webpackChunk_motion_canvas_docs=self.webpackChunk_motion_canvas_docs||[]).push([[9726],{5866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(7896),i=(t(2784),t(876)),o=t(960);const r={sidebar_position:1},l="Creating an Animation",s={unversionedId:"guides/getting-started/quickstart",id:"guides/getting-started/quickstart",title:"Creating an Animation",description:"In this guide, we will start a new Motion Canvas project and create an animation",source:"@site/docs/guides/getting-started/quickstart.mdx",sourceDirName:"guides/getting-started",slug:"/guides/getting-started/quickstart",permalink:"/guides/getting-started/quickstart",draft:!1,editUrl:"https://github.com/motion-canvas/motion-canvas/blob/main/docs/guides/getting-started/quickstart.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"guides",previous:{title:"Getting Started",permalink:"/category/getting-started"},next:{title:"Rendering an Animation",permalink:"/guides/getting-started/rendering"}},c={},p=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Creating a new project",id:"creating-a-new-project",level:3},{value:"Starting the Motion Canvas App",id:"starting-the-motion-canvas-app",level:3},{value:"Programming an animation",id:"programming-an-animation",level:3},{value:"Explanation",id:"explanation",level:3}],m={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-an-animation"},"Creating an Animation"),(0,i.kt)("p",null,"In this guide, we will start a new Motion Canvas project and create an animation\nin it."),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Make sure that ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/"},"Node.js")," version 16 or greater is\ninstalled on your machine."),(0,i.kt)("p",null,"If you're using Motion Canvas as part of the Patreon early access, make sure to\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/motion-canvas/motion-canvas#authenticate-to-github-packages"},"authenticate to GitHub Packages")," first."),(0,i.kt)("h3",{id:"creating-a-new-project"},"Creating a new project"),(0,i.kt)("p",null,"Run the following command in order to scaffold a new Motion Canvas project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm init @motion-canvas\n")),(0,i.kt)("p",null,"Answer the prompts to name your project and select which language you would like\nto use, either TypeScript or plain JavaScript."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"We recommend using TypeScript in your first project, as our Guides use\nTypeScript.")),(0,i.kt)("h3",{id:"starting-the-motion-canvas-app"},"Starting the Motion Canvas App"),(0,i.kt)("p",null,"From your new Motion Canvas project directory, run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm run serve\n")),(0,i.kt)("p",null,"This will start the Motion Canvas editor, which you may open by visiting\n",(0,i.kt)("a",{parentName:"p",href:"http://localhost:9000/"},"http://localhost:9000/"),". We will use the editor to\npreview our animation, but for now there is nothing to see. To do that, we\nmust add an element to our scene."),(0,i.kt)("h3",{id:"programming-an-animation"},"Programming an animation"),(0,i.kt)("p",null,"The scaffolding command will create several files for you, but for now we're\ngoing to focus on ",(0,i.kt)("inlineCode",{parentName:"p"},"src/scenes/example.tsx"),", which is where we can add our\nanimations. Open ",(0,i.kt)("inlineCode",{parentName:"p"},"example.tsx")," in a text editor, and replace all code in\nthe file with the following snippet."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/scenes/example.tsx"',title:'"src/scenes/example.tsx"'},"import {makeKonvaScene} from '@motion-canvas/core/lib/scenes';\nimport {Circle} from 'konva/lib/shapes/Circle';\nimport {useRef} from '@motion-canvas/core/lib/utils';\n\nexport default makeKonvaScene(function* (view) {\n  const myCircle = useRef();\n\n  view.add(\n    <Circle\n      position={{x: -300, y: 0}}\n      ref={myCircle}\n      width={240}\n      height={240}\n      fill=\"#ccc\"\n    />\n  );\n\n  yield* myCircle.value.position({x: 300, y: 0}, 1);\n});\n")),(0,i.kt)("p",null,"Now save the file. Any changes you make are automatically picked up and\nreflected in the preview. You should see a gray circle in the preview pane at\nthe top right of the web application. Press the play button to see the circle\nanimate across the screen."),(0,i.kt)(o.Z,{loop:!0,controls:!0,url:"/video/animation.mp4",mdxType:"ReactPlayer"}),(0,i.kt)("p",null,"Depending on the size of your browser, you may want to zoom the preview out by\nscrolling down on your mouse wheel while hovering over the preview panel."),(0,i.kt)("h3",{id:"explanation"},"Explanation"),(0,i.kt)("p",null,"Motion Canvas is designed to work with different HTML canvas libraries, though\nit currently only ships with ",(0,i.kt)("a",{parentName:"p",href:"https://konvajs.org/"},"Konva")," integration. To\ncreate a new konva scene, we need to call ",(0,i.kt)("inlineCode",{parentName:"p"},"makeKonvaScene")," with a generator\nfunction."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// highlight-next-line\nimport {makeKonvaScene} from '@motion-canvas/core/lib/scenes';\n\n// highlight-next-line\nexport default makeKonvaScene(function* (view) {\n  // animation code\n});\n")),(0,i.kt)("p",null,"The generator function is passed a ",(0,i.kt)("inlineCode",{parentName:"p"},"view")," argument, which we will use to add\ncomponents to the scene."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you aren't familiar with generator functions from JavaScript, declared with\n",(0,i.kt)("inlineCode",{parentName:"p"},"function*"),", you can read the MDN documentation on them ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"},"here"),",\nthough a thorough understanding of them is not necessary to start using Motion\nCanvas.")),(0,i.kt)("p",null,"In order to create an animation, we needed something to animate. For that, we\nused the Konva Circle component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import {makeKonvaScene} from '@motion-canvas/core/lib/scenes';\n// highlight-next-line\nimport {Circle} from 'konva/lib/shapes/Circle';\n\nexport default makeKonvaScene(function* (view) {\n  // highlight-start\n  view.add(\n    <Circle\n      width={240}\n      height={240}\n      fill=\"#ccc\"\n    />\n  );\n  // highlight-end\n});\n")),(0,i.kt)("p",null,"Here we create a new circle instance with ",(0,i.kt)("inlineCode",{parentName:"p"},"<Circle />")," and add it to the scene\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"view.add()"),". This code alone will show a gray circle in the middle of the\nscreen, though it won't move."),(0,i.kt)("p",null,"To animate the circle, we needed to store a reference to it. This is the purpose\nof the ",(0,i.kt)("inlineCode",{parentName:"p"},"useRef")," call."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import {makeKonvaScene} from '@motion-canvas/core/lib/scenes';\nimport {Circle} from 'konva/lib/shapes/Circle';\n// highlight-next-line\nimport {useRef} from '@motion-canvas/core/lib/utils';\n\nexport default makeKonvaScene(function* (view) {\n  // highlight-next-line\n  const myCircle = useRef();\n\n  view.add(\n    <Circle\n      // highlight-next-line\n      ref={myCircle}\n      width={240}\n      height={240}\n      fill=\"#ccc\"\n    />\n  );\n\n  // myCircle.value available here\n});\n")),(0,i.kt)("p",null,"Once the ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," is created with ",(0,i.kt)("inlineCode",{parentName:"p"},"ref={myCircle}"),", it may be accessed from\n",(0,i.kt)("inlineCode",{parentName:"p"},"myCircle.value"),", which we can use to edit the circle's properties. In Konva,\nproperties are read using ",(0,i.kt)("inlineCode",{parentName:"p"},"property()"),", and written using ",(0,i.kt)("inlineCode",{parentName:"p"},"property(value)"),". To\nupdate the circle's position, for instance, we use"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"myCircle.value.position({x: 300, y: 0});\n")),(0,i.kt)("p",null,"When we edit the properties of a component, however, the changes are immediate.\nIn order to ",(0,i.kt)("em",{parentName:"p"},"transition")," to a new value over time, we must change our call in\ntwo ways. We must specify the duration of the transition in seconds to create an\nanimation, ",(0,i.kt)("inlineCode",{parentName:"p"},"position(value, duration)"),", and we must ",(0,i.kt)("inlineCode",{parentName:"p"},"yield*")," to the animation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"yield* myCircle.value.position({x: 300, y: 0}, 1);\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"yield*")," is important. Calling ",(0,i.kt)("inlineCode",{parentName:"p"},"position({...}, 1)")," alone will not run the\nanimation; it simply returns a value called a task, which represents the\nanimation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const task = myCircle.value.position({x: 300, y: 0}, 1);\n")),(0,i.kt)("p",null,"Yielding a task prompts Motion Canvas to run it.  Using ",(0,i.kt)("inlineCode",{parentName:"p"},"yield*")," waits for the\nanimation to complete before continuing the scene function, while using ",(0,i.kt)("inlineCode",{parentName:"p"},"yield"),"\nplays the animation but continues the scene function immediately."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"yield* myCircle.value.position({x: 300, y: 0}, 1);\n// this line will run after the animation has ended\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"yield myCircle.value.position({x: 300, y: 0}, 1);\n// this line will run immediately while the animation plays\n")),(0,i.kt)("p",null,"In our example, we used ",(0,i.kt)("inlineCode",{parentName:"p"},"yield*")," so that the scene wouldn't end until the\nanimation was completed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import {makeKonvaScene} from '@motion-canvas/core/lib/scenes';\nimport {Circle} from 'konva/lib/shapes/Circle';\nimport {useRef} from '@motion-canvas/core/lib/utils';\n\n// make a new konva scene and pass it the scene function\nexport default makeKonvaScene(function* (view) {\n  // create a reference to store the circle\n  const myCircle = useRef();\n\n  // create a circle and add it to the scene's view\n  view.add(\n    <Circle\n      position={{x: -300, y: 0}} // set an initial position\n      ref={myCircle} // assign the circle instance to the myCircle ref\n      width={240}\n      height={240}\n      fill=\"#ccc\"\n    />\n  );\n\n  // animate to a new position over 1 second and\n  // wait for it to finish before continuing\n  yield* myCircle.value.position({x: 300, y: 0}, 1);\n});\n")))}u.isMDXComponent=!0}}]);